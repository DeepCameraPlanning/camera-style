"""
This script converts RGB flow frames generated by Unity to flow field tensor
files.
"""
import argparse
from glob import glob
import os
import os.path as osp
from typing import Tuple

import cv2
import numpy as np
import torch

from src.utils.utils import create_dir, save_pth


def bgr_to_hsv(bgr_frame: np.array) -> np.array:
    """
    Convert a BGR frame to a HSV frame.
    Adapted from: https://github.com/opencv/opencv/blob/17234f82d025e3bbfbf61
    1089637e5aa2038e7b8/3rdparty/openexr/Imath/ImathColorAlgo.cpp
    """
    r_channel = bgr_frame[:, :, 2]
    b_channel = bgr_frame[:, :, 1]
    g_channel = bgr_frame[:, :, 1]

    max_channel_arg = np.argmax(bgr_frame, axis=-1)
    max_channel = np.max(bgr_frame, axis=-1)
    min_channel = np.min(bgr_frame, axis=-1)
    range_channel = max_channel - min_channel
    val = max_channel
    sat = np.zeros(r_channel.shape)
    hue = np.zeros(r_channel.shape)

    sat = np.multiply(max_channel != 0, range_channel / max_channel)
    h_red = np.multiply(
        max_channel_arg == 0, (g_channel - b_channel) / range_channel
    )
    h_blue = np.multiply(
        max_channel_arg == 1, 2 + (b_channel - r_channel) / range_channel
    )
    h_green = np.multiply(
        max_channel_arg == 2, 4 + (r_channel - g_channel) / range_channel
    )
    hue = (h_red + h_blue + h_green) / 6
    hue = np.multiply(hue < 0, 1)

    return np.stack([hue, sat, val], axis=-1)


def frame_to_flow(bgr_frame: np.array) -> np.array:
    """Convert a BGR flow frame into flow field."""
    # Convert BGR frame to HSV
    hsv_frame = bgr_to_hsv(bgr_frame)
    hue = hsv_frame[:, :, 0]
    value = hsv_frame[:, :, 2]

    # Get polar module and angle from hue and value encoding
    theta = (2 * hue + 1) * np.pi
    r = value / 10

    # Convert polar coordinates to euclidean coordinates
    x = r * np.cos(theta)
    y = r * np.sin(theta)

    flow = np.stack([x, y], axis=-1)

    return flow


def parse_arguments() -> Tuple[str, str]:
    """Parse input arguments."""
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "frame_dir",
        type=str,
        help="Path to the directory containing subdir with RGB frames",
    )
    parser.add_argument(
        "flow_dir",
        type=str,
        help="Path to the root flow saving directory",
    )
    args = parser.parse_args()

    return args.frame_dir, args.flow_dir


if __name__ == "__main__":
    frame_rootdir, flow_rootdir = parse_arguments()

    # Iterate over the different directories containing flow frames
    for frame_dirname in os.listdir(frame_rootdir):
        frame_path_pattern = osp.join(frame_rootdir, frame_dirname, "*.png")
        # Load BGR flow frames
        frames = [cv2.imread(frame) for frame in glob(frame_path_pattern)]
        # Convert flow frame to flow field
        flows = [frame_to_flow(bgr_frame) for bgr_frame in frames]

        # Save flows as pytorch tensors
        flow_dir = osp.join(flow_rootdir, frame_dirname)
        create_dir(flow_dir)
        for k in range(len(flows)):
            flow_filename = osp.join(flow_dir, str(k).zfill(4) + ".pth")
            flow_tensor = torch.from_numpy(flows[k])
            save_pth(flow_tensor, flow_filename)
